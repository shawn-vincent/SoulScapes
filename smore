#!/usr/bin/env node
/**
 * smore – A robust log viewer with synthetic top and bottom markers created by the FileReader.
 *
 * In this version the FileReader is responsible for detecting when it has reached the
 * physical beginning and end of the file. When the entire file is read (small file), it
 * injects synthetic markers for both the beginning (top) and the end (bottom). The
 * BufferManager and View then simply treat these as normal lines.
 */

const fs = require('fs');
const path = require('path');

// --- Module Path Magic ---
const additionalModulesPath = path.resolve(__dirname, 'soulscapes-server', 'node_modules');
module.paths.push(additionalModulesPath);

const sliceAnsiModule = require('slice-ansi');
const sliceAnsi = sliceAnsiModule.default || sliceAnsiModule;
const blessed = require('blessed');
const stringWidth = require('string-width').default;
const clipboardyModule = require('clipboardy');
const clipboardy = clipboardyModule.default || clipboardyModule;
const { sdebug, slog, slogConfig, slogParseLine } = require('./shared/slogger.js');

// --- Configuration Constants ---
const CONFIG = {
    maxLineBuffer: 10000,
    readChunkSize: 65536,
    refreshInterval: 100,
    initialLines: 100,
    markers: {
        top: '<<< TOP OF FILE >>>',
        bottom: '<<< BOTTOM OF FILE >>>'
    }
};

// --- Logging Configuration ---
slogConfig({
    slog: [
        "warn",
        { type: "file", path: "logs/smore.log" }
    ]
});

// --- Simple Mutex for Concurrency Control ---
class Mutex {
    constructor() {
        this._locked = false;
        this._waiting = [];
    }
    lock() {
        return new Promise(resolve => {
            if (this._locked) {
                this._waiting.push(resolve);
            } else {
                this._locked = true;
                resolve();
            }
        });
    }
    unlock() {
        if (this._waiting.length > 0) {
            const nextResolve = this._waiting.shift();
            nextResolve();
        } else {
            this._locked = false;
        }
    }
}

// ======================================================================
// 1. FileReader: Handles physical file I/O.
// Each returned line is an object: { text, offset, byteLength }.
// When the read reaches the physical boundary, synthetic markers are injected.
// ======================================================================
class FileReader {
    constructor(filePath) {
        this.filePath = filePath;
        this.fileHandle = null;
        this.fileSize = 0;
        this.currentOffset = 0;
        this.hasTopMarker = false;
        this.hasBottomMarker = false;
    }

    async open() {
        try {
            this.fileHandle = await fs.promises.open(this.filePath, 'r');
            const stats = await this.fileHandle.stat();
            this.fileSize = stats.size;
            this.currentOffset = 0;
            this.hasTopMarker = false;
            this.hasBottomMarker = false;
        } catch (err) {
            throw new Error(`Error opening file "${this.filePath}"`, { cause: err });
        }
    }

    async readChunk(offset, size) {
        try {
            const buffer = Buffer.alloc(size);
            const { bytesRead } = await this.fileHandle.read(buffer, 0, size, offset);
            return { buffer: buffer.slice(0, bytesRead), bytesRead };
        } catch (err) {
            throw new Error(`Error reading chunk at offset ${offset} (size ${size})`, { cause: err });
        }
    }

    async readForward(minLines) {
        sdebug("readForward", minLines);
        const { StringDecoder } = require('string_decoder');
        const decoder = new StringDecoder('utf8');
        let lines = [];
        let offset = this.currentOffset;
        let leftover = '';

        try {
            // Add top marker if not already present and reading from the beginning
            if (!this.hasTopMarker && offset === 0) {
                lines.push(this.createTopMarker());
                this.hasTopMarker = true;
            }

            while (lines.length < minLines && offset < this.fileSize) {
                const toRead = Math.min(CONFIG.readChunkSize, this.fileSize - offset);
                const { buffer, bytesRead } = await this.readChunk(offset, toRead);
                if (bytesRead <= 0) break;

                let chunkStr = leftover + decoder.write(buffer);
                leftover = '';
                let startIdx = 0, idx;

                while ((idx = chunkStr.indexOf('\n', startIdx)) !== -1) {
                    const lineText = chunkStr.substring(startIdx, idx);
                    const byteLen = Buffer.byteLength(lineText, 'utf8') + 1; // +1 for the newline character
                    lines.push({ text: lineText, offset: offset + startIdx, byteLength: byteLen });
                    startIdx = idx + 1;
                }

                leftover = (startIdx < chunkStr.length) ? chunkStr.substring(startIdx) : '';
                offset += bytesRead;
            }

            if (leftover.length > 0) {
                const byteLen = Buffer.byteLength(leftover, 'utf8');
                lines.push({ text: leftover, offset: offset - leftover.length, byteLength: byteLen });
            }

            this.currentOffset = offset;

            // Add bottom marker if at the end of the file and not already present
            if (this.currentOffset >= this.fileSize && !this.hasBottomMarker) {
                lines.push(this.createBottomMarker());
                this.hasBottomMarker = true;
            }

            return lines;
        } catch (err) {
            throw new Error(`Error reading forward from offset ${this.currentOffset}`, { cause: err });
        }
    }


    async readBackward(endOffset, minLines) {
        sdebug("readBackward", minLines);
        const { StringDecoder } = require('string_decoder');
        const decoder = new StringDecoder('utf8');
        let lines = [];
        let offset = endOffset;
        let leftover = '';

        try {
            // Add bottom marker if not already present and reading from the end
            if (!this.hasBottomMarker && endOffset >= this.fileSize) {
                lines.unshift(this.createBottomMarker());
                this.hasBottomMarker = true;
                // Since we prepended, no change in offset.
            }

            while (lines.length < minLines && offset > 0) {
                const toRead = Math.min(CONFIG.readChunkSize, offset);
                const readStart = offset - toRead;
                const { buffer, bytesRead } = await this.readChunk(readStart, toRead);
                if (bytesRead <= 0) break;

                let chunkStr = decoder.write(buffer) + leftover;
                leftover = '';
                let indices = [];
                let idx = chunkStr.lastIndexOf('\n');

                while (idx !== -1) {
                    indices.push(idx);
                    idx = chunkStr.lastIndexOf('\n', idx - 1);
                }

                let chunkLines = [];
                let start = 0;

                for (let i = indices.length - 1; i >= 0; i--) {
                    let pos = indices[i];
                    const lineText = chunkStr.substring(start, pos);
                    const byteLen = Buffer.byteLength(lineText, 'utf8') + 1; // +1 for the newline character
                    chunkLines.push({ text: lineText, offset: readStart + start, byteLength: byteLen });
                    start = pos + 1;
                }

                leftover = chunkStr.substring(start);
                lines = chunkLines.concat(lines);
                offset = readStart;
            }

            if (offset === 0) {
                if (leftover.length > 0) {
                    const byteLen = Buffer.byteLength(leftover, 'utf8');
                    lines.unshift({ text: leftover, offset: 0, byteLength: byteLen });
                }
                // Add top marker if not already present and we've reached the beginning
                if (!this.hasTopMarker) {
                    lines.unshift(this.createTopMarker());
                    this.hasTopMarker = true;
                }
            }

            return lines;
        } catch (err) {
            throw new Error(`Error reading backward from offset ${endOffset}`, { cause: err });
        }
    }


    createTopMarker() {
        return {
            text: CONFIG.markers.top,
            synthetic: true,
            markerType: 'top',
            offset: 0,
            byteLength: Buffer.byteLength(CONFIG.markers.top, 'utf8')
        };
    }

    createBottomMarker() {
        return {
            text: CONFIG.markers.bottom,
            synthetic: true,
            markerType: 'bottom',
            offset: this.fileSize,
            byteLength: Buffer.byteLength(CONFIG.markers.bottom, 'utf8')
        };
    }

    isAtBeginning() {
        return this.currentOffset === 0 && this.hasTopMarker;
    }

    async isAtEnd() {
        return this.currentOffset >= this.fileSize && this.hasBottomMarker;
    }

    seekToBeginning() {
        this.currentOffset = 0;
        this.hasTopMarker = false;
        this.hasBottomMarker = false;
    }

    async seekToEnd() {
        const stats = await this.fileHandle.stat();
        this.fileSize = stats.size;
        this.currentOffset = this.fileSize;
        this.hasTopMarker = false;
        this.hasBottomMarker = false;
    }
}


// ======================================================================
// 2. BufferManager: Manages the logical buffer.
// It now simply collects lines returned from FileReader.
// ======================================================================
class BufferManager {
    constructor(fileReader) {
        this.fileReader = fileReader;
        this.lines = [];
        this.topIndex = 0;
        this.highlightIndex = 0;
        this.mutex = new Mutex();
    }

    async fillForward(minLines = CONFIG.initialLines) {
        await this.mutex.lock();
        try {
            const newLines = await this.fileReader.readForward(minLines);
            if (newLines.length > 0) {
                newLines.forEach(line => { line.synthetic = line.synthetic || false; });
                this.lines.push(...newLines);
            }
            this.pruneBuffer();
        } finally {
            this.mutex.unlock();
        }
    }

    async fillBackward(minLines = CONFIG.initialLines) {
        await this.mutex.lock();
        try {
            const currentEndOffset = this.lines.length > 0 ? this.lines[0].offset : this.fileReader.fileSize;
            const newLines = await this.fileReader.readBackward(currentEndOffset, minLines);
            newLines.forEach(line => { line.synthetic = line.synthetic || false; });

            if (newLines.length > 0) {
                this.lines = newLines.concat(this.lines);
                this.highlightIndex += newLines.length;
                this.topIndex += newLines.length;
            }
            this.pruneBuffer();
        } finally {
            this.mutex.unlock();
        }
    }

    pruneBuffer() {
        if (this.lines.length <= CONFIG.maxLineBuffer) return;
        const excess = this.lines.length - CONFIG.maxLineBuffer;
        if (this.highlightIndex >= Math.floor(this.lines.length / 2)) {
            let removeCount = excess;
            this.lines.splice(0, removeCount);
            this.topIndex = Math.max(0, this.topIndex - removeCount);
            this.highlightIndex = Math.max(0, this.highlightIndex - removeCount);
        } else {
            let removeCount = excess;
            this.lines.splice(this.lines.length - removeCount, removeCount);
        }
    }

    getHighlightBounds() {
        return { minIndex: 0, maxIndex: this.lines.length - 1 };
    }
}

// ======================================================================
// 3. View: Renders file content and handles navigation.
// ======================================================================
class View {
    constructor(buffer, filePath) {
        this.buffer = buffer;
        this.filePath = filePath;
        this.scrollLeft = 0;
        this.cmdActive = false;
        this.screen = blessed.screen({
            smartCSR: true,
            fullUnicode: true,
            title: 'smore'
        });
        this.contentBox = blessed.box({
            top: 0,
            left: 0,
            width: '100%',
            height: '100%-1',
            tags: true,
            wrap: false,
            style: { fg: 'white', bg: 'black' }
        });
        this.cmdBox = blessed.textbox({
            bottom: 0,
            left: 0,
            width: '100%',
            height: 1,
            inputOnFocus: true,
            style: { fg: 'yellow', bg: 'blue' }
        });
        this.screen.append(this.contentBox);
        this.screen.append(this.cmdBox);
        this.setCmdHelp();
        this.setupKeyHandlers();
    }

    setCmdHelp() {
        const helpText = `File: ${this.filePath} [q:quit, /:command, C:copy screen, home/end for jump]`;
        const width = this.screen.width;
        const truncated = helpText.length > width ? helpText.substring(0, width) : helpText;
        this.cmdBox.setContent(truncated);
    }

    buildMarkerText(type, width) {
        const text = CONFIG.markers[type];
        const visibleLength = stringWidth(text);
        const leftPad = Math.max(0, Math.floor((width - visibleLength) / 2));
        const rightPad = width - leftPad - visibleLength;
        return ' '.repeat(leftPad) +
            '{bold}{cyan-fg}' + text + '{/cyan-fg}{/bold}' +
            ' '.repeat(rightPad);
    }

    formatTime(date, includeSeconds) {
        let hours = date.getHours() % 12 || 12;
        let hoursStr = hours < 10 ? ' ' + hours : '' + hours;
        const minutes = date.getMinutes();
        const seconds = date.getSeconds();
        const ampm = date.getHours() >= 12 ? 'pm' : 'am';
        const minStr = minutes < 10 ? '0' + minutes : minutes;
        let timeStr = hoursStr + ':' + minStr;
        if (includeSeconds) {
            const secStr = seconds < 10 ? '0' + seconds : seconds;
            timeStr += ':' + secStr;
        }
        return timeStr + ampm;
    }

    formatConciseDate(timestamp) {
        const dateObj = new Date(timestamp);
        if (isNaN(dateObj)) return '';
        const now = new Date();
        const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
        const target = new Date(dateObj.getFullYear(), dateObj.getMonth(), dateObj.getDate());
        const diffDays = Math.floor((today - target) / (1000 * 60 * 60 * 24));
        if (diffDays === 0) return this.formatTime(dateObj, true);
        else if (diffDays > 0 && diffDays < 7) return '-' + diffDays + 'd ' + this.formatTime(dateObj, false);
        else {
            const monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun",
                "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
            return monthNames[dateObj.getMonth()] + ' ' + dateObj.getDate() + ' ' + this.formatTime(dateObj, false);
        }
    }

    formatLogLine(rawText) {
        const parsed = slogParseLine(rawText);
        let parts = [];
        if (parsed.timestamp) {
            const concise = this.formatConciseDate(parsed.timestamp);
            if (concise) parts.push(`[${concise}]`);
        }
        if (parsed.component) {
            if (parsed.component.startsWith('_remote')) {
                const match = parsed.component.match(/_remote\[(.*?)\]/);
                parts.push(match ? '🌐[' + match[1] + ']' : '🌐');
            } else {
                parts.push('.' + parsed.component);
            }
        }
        if (parsed.level && parsed.level !== 'log') {
            parts.push(parsed.level + ':');
        }
        if (parsed.message) {
            parts.push(parsed.message);
        }
        return parts.join(' ').trim();
    }

    async renderContent() {
        const totalRows = this.contentBox.height;
        const width = this.screen.width;
        let visibleLines = this.buffer.lines.slice(this.buffer.topIndex, this.buffer.topIndex + totalRows);
        let rows = visibleLines.map(line => {
            if (line.synthetic) {
                return this.buildMarkerText(line.markerType, width);
            } else {
                const fullText = this.formatLogLine(line.text);
                return formatScrollText(fullText, this.scrollLeft, width);
            }
        });
        while (rows.length < totalRows) {
            rows.push(' '.repeat(width));
        }
        const highlightRow = this.buffer.highlightIndex - this.buffer.topIndex;
        if (highlightRow >= 0 && highlightRow < rows.length) {
            rows[highlightRow] = `{inverse}${rows[highlightRow]}{/inverse}`;
        }
        this.contentBox.setContent(rows.join('\n'));
    }

    async adjustView() {
        const totalRows = this.contentBox.height;
        if (this.buffer.highlightIndex < this.buffer.topIndex) {
            this.buffer.topIndex = this.buffer.highlightIndex;
        } else if (this.buffer.highlightIndex >= this.buffer.topIndex + totalRows) {
            this.buffer.topIndex = this.buffer.highlightIndex - totalRows + 1;
        }
    }

    async adjustViewForBottom() {
        const totalRows = this.contentBox.height;
        const linesCount = this.buffer.lines.length;

        //If the lineCount is less than the total rows, then there's no scrolling to do
        if(linesCount <= totalRows) {
            this.buffer.topIndex = 0;
            this.buffer.highlightIndex = linesCount > 0 ? linesCount - 1 : 0;
            return;
        }

        this.buffer.highlightIndex = linesCount - 1;
        this.buffer.topIndex = Math.max(0, linesCount - totalRows);


    }

    async render() {
        await this.renderContent();
        if (!this.cmdActive) {
            this.setCmdHelp();
        }
        this.screen.render();
    }

    setupKeyHandlers() {
        this.screen.key(['escape', 'q', 'C-c'], () => process.exit(0));
        this.screen.key(['up'], async () => { if (!this.cmdActive) await this.moveHighlight(-1); });
        this.screen.key(['down'], async () => { if (!this.cmdActive) await this.moveHighlight(1); });
        this.screen.key(['pageup'], async () => { if (!this.cmdActive) await this.moveHighlight(-this.contentBox.height); });
        this.screen.key(['pagedown'], async () => { if (!this.cmdActive) await this.moveHighlight(this.contentBox.height); });
        this.screen.key(['home'], async () => { if (!this.cmdActive) await this.jumpToTop(); });
        this.screen.key(['end'], async () => { if (!this.cmdActive) await this.jumpToBottom(); });
        this.screen.key(['left'], () => { if (!this.cmdActive) this.scroll(-5); });
        this.screen.key(['right'], () => { if (!this.cmdActive) this.scroll(5); });
        this.screen.key(['/'], () => { if (!this.cmdActive) this.enterCommandMode(); });
        this.screen.key(['c'], () => {
            slog("copying screen to clipboard");
            if (!this.cmdActive) this.copyScreen();
        });
        this.screen.key(['C-l'], async () => {
            slog("refreshing screen");
            this.screen.realloc();
            await this.render();
        });
        this.screen.on('resize', () => { this.render(); });
    }

    async moveHighlight(delta) {
        const { minIndex, maxIndex } = this.buffer.getHighlightBounds();
        let newIndex = this.buffer.highlightIndex + delta;
        newIndex = Math.max(minIndex, Math.min(newIndex, maxIndex));
        this.buffer.highlightIndex = newIndex;
        if (delta < 0 && newIndex === minIndex) {
            await this.buffer.fillBackward();
        }
        if (delta > 0 && newIndex === maxIndex) {
            await this.buffer.fillForward();
        }
        await this.adjustView();
        this.screen.realloc();
        await this.render();
    }

    scroll(delta) {
        this.scrollLeft = Math.max(0, this.scrollLeft + delta);
        this.screen.realloc();
        this.render();
    }

    async jumpToTop() {
        this.buffer.lines = [];
        this.buffer.topIndex = 0;
        this.buffer.highlightIndex = 0;
        this.buffer.fileReader.seekToBeginning();
        await this.buffer.fillForward(this.contentBox.height);
        this.screen.realloc();
        await this.render();
    }

    async jumpToBottom() {
        this.buffer.lines = [];
        this.buffer.topIndex = 0;
        await this.buffer.fileReader.seekToEnd();
        await this.buffer.fillBackward(this.contentBox.height * 2);

        const stats = await this.buffer.fileReader.fileHandle.stat();
        this.buffer.fileReader.fileSize = stats.size;
        this.buffer.fileReader.currentOffset = stats.size;

        await this.adjustViewForBottom(); // Use new function here
        this.screen.realloc();
        await this.render();
    }

    enterCommandMode() {
        this.cmdActive = true;
        this.cmdBox.clearValue();
        this.cmdBox.focus();
        this.cmdBox.readInput(async (err, value) => {
            if (err) {
                this.cmdActive = false;
                this.setCmdHelp();
                this.screen.realloc();
                this.screen.render();
                return;
            }
            let parsedLog = null;
            const currentLine = this.buffer.lines[this.buffer.highlightIndex];
            if (currentLine && !currentLine.synthetic) {
                parsedLog = slogParseLine(currentLine.text);
            }
            const output = await this.executeCommand(value, parsedLog);
            this.cmdBox.setContent(output);
            this.cmdActive = false;
            this.screen.focusPop();
            this.render();
        });
    }

    async executeCommand(commandText, parsedLog) {
        return `Command executed: ${commandText}\nParsed log: ${JSON.stringify(parsedLog)}`;
    }

    async copyScreen() {
        const content = this.contentBox.getContent();
        const cmd = this.cmdBox.getContent();
        const fullScreenText = content.split('\n').concat([cmd]).join('\n');
        await clipboardy.writeSync("====== smore screenshot ======\n" + fullScreenText);
        this.cmdBox.setContent("Screen copied to clipboard");
        this.screen.render();
        setTimeout(() => {
            if (!this.cmdActive) {
                this.setCmdHelp();
                this.screen.realloc();
                this.screen.render();
            }
        }, 2000);
    }
}

// ======================================================================
// 4. Main / Auto-Refresh: Setup, initial load, and file-change monitoring.
// ======================================================================


async function main() {
    if (process.argv.length < 3) {
        console.error('Usage: smore <filename>');
        process.exit(1);
    }
    try {
        const filePath = process.argv[2];
        const fileReader = new FileReader(filePath);
        await fileReader.open();

        const buffer = new BufferManager(fileReader);
        const view = new View(buffer, filePath);

        // Initial load: read backward so that the end-of-file is visible.
        await buffer.fillBackward(view.contentBox.height * 2);
        await view.adjustViewForBottom(); // Use new function here.

        // Update file pointer.
        const stats = await fileReader.fileHandle.stat();
        fileReader.fileSize = stats.size;
        fileReader.currentOffset = stats.size;

        await view.render();

        // Monitor file changes.
	setInterval(async () => {
	    try {
		const stats = await fileReader.fileHandle.stat();
		if (stats.size < fileReader.fileSize) {
		    // File truncation (shrinkage)
		    fileReader.fileSize = stats.size;
		    fileReader.currentOffset = 0;
		    buffer.lines = [];
		    buffer.topIndex = 0;
		    buffer.highlightIndex = 0;
		    fileReader.hasTopMarker = false;
		    fileReader.hasBottomMarker = false;
		    await buffer.fillForward(view.contentBox.height);
		    await view.render();
		} else if (stats.size > fileReader.fileSize) {
		    // File extension (growth)
		    const previousFileSize = fileReader.fileSize; //Store the old value.
		    fileReader.fileSize = stats.size;

		    //Check is the last line the cursor is on is bottom.
		    const isAtBottom = buffer.lines.length > 0 && buffer.highlightIndex === buffer.lines.length - 1 && buffer.lines[buffer.highlightIndex].markerType === 'bottom';

		    if (isAtBottom) {

			//Remove the last bottom marker.
			if (buffer.lines.length > 0 && buffer.lines[buffer.lines.length - 1].markerType === 'bottom') {
			    buffer.lines.pop();
			    buffer.highlightIndex = Math.max(0, buffer.highlightIndex - 1); // Adjust highlight index if needed
			}
			fileReader.hasBottomMarker = false;
			await buffer.fillForward(view.contentBox.height);
			await view.adjustViewForBottom();

		    }
		    fileReader.currentOffset = stats.size;
		}
		await view.render();
	    } catch (err) {
		slog('Error checking file size:', err);
	    }
	}, CONFIG.refreshInterval);

    } catch (err) {
        slog('Error:', err);
        process.exit(1);
    }
}

main();

// ---------------------------------------------------------------------
// Helper: Slice a string by visible columns using sliceAnsi and stringWidth.
function formatScrollText(text, scrollLeft, width) {
    let visible = sliceAnsi(text, scrollLeft, scrollLeft + width);
    let currentWidth = stringWidth(visible);
    if (currentWidth < width) {
        visible += ' '.repeat(width - currentWidth);
    }
    if (scrollLeft > 0) {
        let rest = sliceAnsi(visible, 1);
        visible = '←' + rest;
    }
    if (stringWidth(text) > scrollLeft + width) {
        let prefix = sliceAnsi(visible, 0, width - 1);
        visible = prefix + '→';
    }
    return visible;
}
