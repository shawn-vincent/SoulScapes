#!/usr/bin/env node
/**
 * slog - Command Line Interface for slogging (slogger)
 *
 * Usage:
 *   slog {debug|log|warn|error|<optional>} [.component] msg [args...]
 *   slog {debug|log|warn|error|<optional>} [.a.b.c] msg [args...]
 *
 * Examples:
 *   slog debug "User ${user} logged in" '{"user": "alice"}'
 *   slog debug .auth "User ${user} logged in" '{"user": "alice"}'
 *   slog "A simple log message"
 *
 * This script uses the slogger module and supports a configuration file (.slogger)
 * in either:
 *   1. The current working directory (for project-specific configuration), or
 *   2. The directory where the slog file resides (as a default configuration).
 *
 * The configuration file is assumed to be in JSON format.
 *
 * Additionally, when run via this CLI tool, the "slogger" component's logging level
 * (for both file/socket and console) is overridden to "warn".
 */

import pkg from './shared/slogger.js'; // Adjust the relative path as needed.
const { sdebug, slog, swarn, serror, csdebug, cslog, cswarn, cserror, slogConfig } = pkg;

import { existsSync, readFileSync } from 'fs';
import path from 'path';

// Helper to determine the directory of the current module (ES module compatible)
const __dirname = path.dirname(new URL(import.meta.url).pathname);

// --- Load configuration from .slogger ---
// First, try loading the .slogger config from the current working directory.
let configPath = path.resolve(process.cwd(), '.slogger');

// If not found there, fall back to the directory where the "slog" file resides.
if (!existsSync(configPath)) {
  configPath = path.resolve(__dirname, '.slogger');
}

if (existsSync(configPath)) {
  try {
    const configText = readFileSync(configPath, { encoding: 'utf8' });
    const configObj = JSON.parse(configText);
    slogConfig(configObj);
  } catch (err) {
    console.error("Error loading .slogger config file:", err.message);
    // Optionally, exit if configuration is critical:
    // process.exit(1);
  }
} else {
    slogConfig({
	"slog": "debug",
	"slog.slogger": "warn"
    });
}

// --- Override the "slogger" component logging to "warn" ---
//slogConfig({
//  "slog.slogger": "warn",
//});

// --- Process command-line arguments ---
const args = process.argv.slice(2);

if (args.length === 0) {
  console.error('Usage: slog {debug|log|warn|error|<optional>} [.component] msg [args...]');
  process.exit(1);
}

// Determine if the first argument is a recognized log level.
const possibleLevel = args[0].toLowerCase();
let level, remainingArgs;
if (['debug', 'log', 'warn', 'error'].includes(possibleLevel)) {
  level = possibleLevel;
  remainingArgs = args.slice(1);
} else {
  // Default to "log" if no recognized level is provided.
  level = 'log';
  remainingArgs = args;
}

let component = null;
// If the first remaining argument starts with a dot, treat it as a component spec.
if (remainingArgs.length > 0 && remainingArgs[0].startsWith('.')) {
  component = remainingArgs[0].substring(1); // remove the leading dot
  remainingArgs = remainingArgs.slice(1);
}

if (remainingArgs.length === 0) {
  console.error('Error: Missing log message.');
  process.exit(1);
}

// Combine the remaining arguments into the log message.
const message = remainingArgs.join(' ');

// Dispatch the log message to the appropriate slogger function.
if (component) {
  switch (level) {
    case 'debug':
      csdebug(component, message);
      break;
    case 'warn':
      cswarn(component, message);
      break;
    case 'error':
      cserror(component, message);
      break;
    default:
      cslog(component, message);
      break;
  }
} else {
  switch (level) {
    case 'debug':
      sdebug(message);
      break;
    case 'warn':
      swarn(message);
      break;
    case 'error':
      serror(message);
      break;
    default:
      slog(message);
      break;
  }
}

/* Local Variables: */
/* mode: js */
/* End: */
